// Netlify serverless function for managing translations
const fs = require('fs');
const path = require('path');
const NodeCache = require('node-cache');
const jwt = require('jsonwebtoken');
const jwksClient = require('jwks-rsa');

// Create a cache with a default TTL of 5 minutes (300 seconds)
const cache = new NodeCache({ stdTTL: 300 });

// Path to the translations JSON file in the Git repository
const TRANSLATIONS_PATH = path.join(__dirname, 'translations.json');

// GitHub OAuth configuration
const GITHUB_TOKEN_SECRET = process.env.GITHUB_TOKEN_SECRET || 'livada-biotope-github-secret';

// Verify GitHub token
const verifyGitHubToken = async (token) => {
  try {
    // Verify the token with GitHub API
    const response = await fetch('https://api.github.com/user', {
      headers: {
        'Authorization': `token ${token}`,
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    
    const userData = await response.json();
    return userData;
  } catch (error) {
    console.error('Error verifying GitHub token:', error);
    throw error;
  }
};

// Simplified token verification for public endpoints
// This is used for non-admin endpoints that don't require authentication
const verifyToken = (token) => {
  // For public endpoints, we don't need to verify the token
  // Just return a resolved promise
  return Promise.resolve({ sub: 'public-user' });
};

exports.handler = async (event, context) => {
  try {
    // Set CORS headers
    const headers = {
      'Access-Control-Allow-Origin': '*', // Replace with your domain in production
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Content-Type': 'application/json'
    };

    // Handle OPTIONS request (preflight)
    if (event.httpMethod === 'OPTIONS') {
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ message: 'CORS preflight request successful' })
      };
    }

    // Only verify authentication for write operations (POST/PUT)
    let isAuthenticated = false;
    
    if (event.httpMethod === 'POST' || event.httpMethod === 'PUT') {
      const authHeader = event.headers.authorization || '';
      
      if (!authHeader.startsWith('Bearer ')) {
        return {
          statusCode: 401,
          headers,
          body: JSON.stringify({ error: 'Unauthorized - No token provided' })
        };
      }
      
      const token = authHeader.substring(7);
      
      try {
        await verifyToken(token);
        isAuthenticated = true;
      } catch (authError) {
        console.error('Token verification failed:', authError);
        return {
          statusCode: 401,
          headers,
          body: JSON.stringify({ error: 'Unauthorized - Invalid token', details: authError.message })
        };
      }
    }

    // Parse query parameters
    const params = event.queryStringParameters || {};
    const locale = params.locale || 'en';
    const key = params.key || null;
    
    // Create a cache key
    const cacheKey = `translations_${locale}_${key || 'all'}`;

    // Check if we have a cached response
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      console.log(`Serving cached translations for locale: ${locale}, key: ${key || 'all'}`);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify(cachedData)
      };
    }

    // For GET requests - read translations and return them
    if (event.httpMethod === 'GET') {
      try {
        // Read and parse the translations file
        let translationsData = {};
        
        if (fs.existsSync(TRANSLATIONS_PATH)) {
          const fileContent = fs.readFileSync(TRANSLATIONS_PATH, 'utf8');
          translationsData = JSON.parse(fileContent);
        } else {
          console.warn(`Translations file not found at ${TRANSLATIONS_PATH}. Creating empty translations file.`);
          
          // Create an empty translations file
          translationsData = {
            en: {},
            sl: {}
          };
          
          fs.writeFileSync(TRANSLATIONS_PATH, JSON.stringify(translationsData, null, 2));
        }

        // Get translations for the specified locale
        const localeTranslations = translationsData[locale] || {};
        
        // Filter by key if specified
        let result = localeTranslations;
        if (key) {
          result = localeTranslations[key] || null;
        }
        
        // Cache the result
        cache.set(cacheKey, result);
        
        // Return the result
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify(result)
        };
      } catch (error) {
        console.error('Error reading translations:', error);
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Error reading translations', details: error.message })
        };
      }
    }

    // Handle POST requests to update translations (only if authenticated)
    if (event.httpMethod === 'POST') {
      if (!isAuthenticated) {
        return {
          statusCode: 401,
          headers,
          body: JSON.stringify({ error: 'Unauthorized - Authentication required for updating translations' })
        };
      }
      
      try {
        // Parse the request body
        const requestBody = JSON.parse(event.body);
        const { locale: updateLocale, key: updateKey, value } = requestBody;
        
        if (!updateLocale || !updateKey || value === undefined) {
          return {
            statusCode: 400,
            headers,
            body: JSON.stringify({ error: 'Bad request - Missing required fields (locale, key, value)' })
          };
        }
        
        // Read and parse the translations file
        let translationsData = {};
        
        if (fs.existsSync(TRANSLATIONS_PATH)) {
          const fileContent = fs.readFileSync(TRANSLATIONS_PATH, 'utf8');
          translationsData = JSON.parse(fileContent);
        } else {
          translationsData = {
            en: {},
            sl: {}
          };
        }
        
        // Create the locale object if it doesn't exist
        if (!translationsData[updateLocale]) {
          translationsData[updateLocale] = {};
        }
        
        // Update the translation
        translationsData[updateLocale][updateKey] = value;
        
        // Write the updated translations back to the file
        fs.writeFileSync(TRANSLATIONS_PATH, JSON.stringify(translationsData, null, 2));
        
        // Invalidate cache for the updated locale
        const cacheKeyPattern = `translations_${updateLocale}_`;
        const keys = cache.keys();
        for (const key of keys) {
          if (key.startsWith(cacheKeyPattern)) {
            cache.del(key);
          }
        }
        
        // Return success
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({ success: true, message: 'Translation updated successfully' })
        };
      } catch (error) {
        console.error('Error updating translations:', error);
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Error updating translations', details: error.message })
        };
      }
    }
    
    // Return 405 Method Not Allowed for any other method
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
    
  } catch (error) {
    console.error('Serverless function error:', error);
    return {
      statusCode: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ error: 'Internal server error', details: error.message })
    };
  }
};
