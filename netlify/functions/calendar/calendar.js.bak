// Netlify serverless function to fetch and cache Google Calendar events
const fetch = require('node-fetch');
const ical = require('node-ical');
const NodeCache = require('node-cache');

// Create a cache with a default TTL of 30 minutes (1800 seconds)
const cache = new NodeCache({ stdTTL: 1800 });

// Google Calendar URL (public iCal URL)
// Using a direct public calendar URL that's more reliable
const CALENDAR_URL = 'https://calendar.google.com/calendar/ical/c_5d78eb671288cb126a905292bb719eaf94ae3c84b114b02c622dba9aa1c37cb7%40group.calendar.google.com/public/basic.ics';

// Fallback calendar URL in case the primary one fails
const FALLBACK_CALENDAR_URL = 'https://calendar.google.com/calendar/ical/en.slovenian%23holiday%40group.v.calendar.google.com/public/basic.ics';

// Simple translations for event types and common words
const translations = {
  en: {
    workshop: 'Workshop',
    lecture: 'Lecture',
    community: 'Community Event',
    other: 'Event'
  },
  sl: {
    workshop: 'Delavnica',
    lecture: 'Predavanje',
    community: 'Skupnostni dogodek',
    other: 'Dogodek'
  }
};

// Function to generate mock events for testing when the API is unavailable
function generateMockEvents(locale) {
  const now = new Date();
  const eventTypes = ['workshop', 'lecture', 'community', 'other'];
  const events = [];
  
  // Generate 5 upcoming events
  for (let i = 0; i < 5; i++) {
    const eventDate = new Date(now);
    eventDate.setDate(now.getDate() + (i * 3) + 1); // Events every 3 days
    
    const startTime = new Date(eventDate);
    startTime.setHours(10 + i, 0, 0); // Different start times
    
    const endTime = new Date(startTime);
    endTime.setHours(endTime.getHours() + 2); // 2 hour events
    
    const eventType = eventTypes[i % eventTypes.length];
    
    events.push({
      id: `mock-event-${i + 1}`,
      title: locale === 'sl' 
        ? `${translations.sl[eventType]} ${i + 1}: Biotop Livada` 
        : `${translations.en[eventType]} ${i + 1}: Livada Biotope`,
      description: locale === 'sl'
        ? `To je testni dogodek za Biotop Livada. Pridružite se nam za zanimivo aktivnost!`
        : `This is a test event for Livada Biotope. Join us for an exciting activity!`,
      start: startTime,
      end: endTime,
      location: 'Livada Biotope, Ljubljana, Slovenia',
      type: eventType,
      url: 'https://livada.bio/events'
    });
  }
  
  // Generate 3 past events
  for (let i = 0; i < 3; i++) {
    const eventDate = new Date(now);
    eventDate.setDate(now.getDate() - (i * 5) - 1); // Events every 5 days in the past
    
    const startTime = new Date(eventDate);
    startTime.setHours(14 + i, 0, 0); // Different start times
    
    const endTime = new Date(startTime);
    endTime.setHours(endTime.getHours() + 1, 30); // 1.5 hour events
    
    const eventType = eventTypes[(i + 2) % eventTypes.length];
    
    events.push({
      id: `mock-past-event-${i + 1}`,
      title: locale === 'sl' 
        ? `Pretekli ${translations.sl[eventType]} ${i + 1}` 
        : `Past ${translations.en[eventType]} ${i + 1}`,
      description: locale === 'sl'
        ? `To je pretekli testni dogodek za Biotop Livada. Hvala vsem udeležencem!`
        : `This is a past test event for Livada Biotope. Thanks to all participants!`,
      start: startTime,
      end: endTime,
      location: 'Livada Biotope, Ljubljana, Slovenia',
      type: eventType,
      url: 'https://livada.bio/events'
    });
  }
  
  return events;
}

exports.handler = async (event, context) => {
  try {
    // Set CORS headers
    const headers = {
      'Access-Control-Allow-Origin': '*', // Replace with your domain in production
      'Access-Control-Allow-Headers': 'Content-Type',
      'Content-Type': 'application/json'
    };

    // Handle OPTIONS request (preflight)
    if (event.httpMethod === 'OPTIONS') {
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ message: 'CORS preflight request successful' })
      };
    }

    // Parse query parameters
    const params = event.queryStringParameters || {};
    const locale = params.locale || 'en';
    
    // Create a cache key based on the locale
    const cacheKey = `calendar_events_${locale}`;

    // Check if we have a cached response
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      console.log(`Serving cached calendar data for locale: ${locale}`);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify(cachedData)
      };
    }

    // Generate mock events for testing
    const mockEvents = generateMockEvents(locale);

    // Add cache-busting parameter to avoid stale data
    const cacheBuster = new Date().getTime();
    const url = `${CALENDAR_URL}?_=${cacheBuster}`;
    
    // Fetch iCal data from Google Calendar with retry logic and fallback
    console.log(`Fetching calendar data from: ${url}`);
    let response;
    let retries = 3;
    let useFallback = false;
    
    // Try primary URL first
    while (retries > 0 && !useFallback) {
      try {
        response = await fetch(url, {
          headers: {
            'User-Agent': 'LivadaBiotope/1.0 (https://livada-biotope.netlify.app/)',
            'Accept': 'text/calendar,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          },
          // Add timeout to prevent hanging requests
          timeout: 10000
        });
        
        if (response.ok) break;
        
        console.log(`Calendar API error: ${response.status}. Retrying... (${retries} attempts left)`);
        retries--;
        // Wait 1 second before retrying
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // If we've exhausted retries, try the fallback URL
        if (retries === 0) {
          useFallback = true;
          retries = 3; // Reset retries for fallback
        }
      } catch (error) {
        console.log(`Fetch error: ${error.message}. Retrying... (${retries} attempts left)`);
        retries--;
        // Wait 1 second before retrying
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // If we've exhausted retries, try the fallback URL
        if (retries === 0) {
          useFallback = true;
          retries = 3; // Reset retries for fallback
        }
      }
    }
    
    // Try fallback URL if primary failed
    if (useFallback) {
      console.log(`Primary calendar URL failed. Trying fallback URL: ${FALLBACK_CALENDAR_URL}`);
      
      while (retries > 0) {
        try {
          response = await fetch(FALLBACK_CALENDAR_URL, {
            headers: {
              'User-Agent': 'LivadaBiotope/1.0 (https://livada-biotope.netlify.app/)',
              'Accept': 'text/calendar,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'Cache-Control': 'no-cache',
              'Pragma': 'no-cache'
            },
            timeout: 10000
          });
          
          if (response.ok) break;
          
          console.log(`Fallback Calendar API error: ${response.status}. Retrying... (${retries} attempts left)`);
          retries--;
          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (error) {
          console.log(`Fallback fetch error: ${error.message}. Retrying... (${retries} attempts left)`);
          retries--;
          if (retries === 0) throw error;
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    }
    
    if (!response || !response.ok) {
      // If both primary and fallback APIs fail, return mock events
      console.log('Both primary and fallback calendar URLs failed. Returning mock events.');
      
      // Cache the mock events
      cache.set(cacheKey, mockEvents);
      
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify(mockEvents)
      };
    }

    // If we get here, we have a successful response
    let events = [];
    try {
      const icalData = await response.text();
      const parsedEvents = ical.parseICS(icalData);
      
      // Process the events
      for (const key in parsedEvents) {
        const event = parsedEvents[key];
        
        // Only process VEVENT items
        if (event.type !== 'VEVENT') continue;
        
        // Skip events without a start date
        if (!event.start) continue;
        
        // Determine event type based on summary/description
        const eventText = `${event.summary || ''} ${event.description || ''}`.toLowerCase();
        let eventType = 'other';
        
        if (eventText.includes('workshop') || eventText.includes('delavnica')) {
          eventType = 'workshop';
        } else if (eventText.includes('lecture') || eventText.includes('talk') || eventText.includes('predavanje')) {
          eventType = 'lecture';
        } else if (eventText.includes('community') || eventText.includes('skupnost')) {
          eventType = 'community';
        }
        
        // Basic translation of event title and description
        let title = event.summary || translations[locale][eventType];
        let description = event.description || '';
        
        // Very simple translation logic - in a real app, use a proper translation service
        if (locale === 'sl' && title.includes('Workshop')) {
          title = title.replace('Workshop', 'Delavnica');
        } else if (locale === 'sl' && title.includes('Lecture')) {
          title = title.replace('Lecture', 'Predavanje');
        } else if (locale === 'sl' && title.includes('Community Event')) {
          title = title.replace('Community Event', 'Skupnostni dogodek');
        }
        
        // Format the event
        events.push({
          id: event.uid || `event-${events.length + 1}`,
          title: title,
          description: description,
          start: event.start,
          end: event.end || new Date(event.start.getTime() + 60 * 60 * 1000), // Default 1 hour
          location: event.location || 'Livada Biotope, Ljubljana',
          type: eventType,
          url: event.url || ''
        });
      }
    } catch (error) {
      console.error('Error parsing calendar data:', error);
      // If parsing fails, use mock events
      events = mockEvents;
    }
    
    // If no events were parsed, use mock events
    if (events.length === 0) {
      console.log('No events parsed from calendar. Using mock events.');
      events = mockEvents;
    }
    
    // Cache the events
    cache.set(cacheKey, events);
    
    // Return the processed events
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify(events)
    };
  } catch (error) {
    console.error('Serverless function error:', error);
    
    // Generate mock events as a fallback
    const locale = (event.queryStringParameters || {}).locale || 'en';
    const mockEvents = generateMockEvents(locale);
    
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
  }
}
    
if (!response || !response.ok) {
  // If both primary and fallback APIs fail, return mock events
  console.log('Both primary and fallback calendar URLs failed. Returning mock events.');
      
  // Cache the mock events
  cache.set(cacheKey, mockEvents);
      
  return {
    statusCode: 200,
    headers,
    body: JSON.stringify(mockEvents)
  };
}

// If we get here, we have a successful response
let events = [];
try {
  const icalData = await response.text();
  const parsedEvents = ical.parseICS(icalData);
      
  // Process the events
  for (const key in parsedEvents) {
    const event = parsedEvents[key];
        
    // Only process VEVENT items
    if (event.type !== 'VEVENT') continue;
        
    // Skip events without a start date
    if (!event.start) continue;
        
    // Determine event type based on summary/description
    const eventText = `${event.summary || ''} ${event.description || ''}`.toLowerCase();
    let eventType = 'other';
        
    if (eventText.includes('workshop') || eventText.includes('delavnica')) {
      eventType = 'workshop';
    } else if (eventText.includes('lecture') || eventText.includes('talk') || eventText.includes('predavanje')) {
      eventType = 'lecture';
    } else if (eventText.includes('community') || eventText.includes('skupnost')) {
      eventType = 'community';
    }
        
    // Basic translation of event title and description
    let title = event.summary || translations[locale][eventType];
    let description = event.description || '';
        
    // Very simple translation logic - in a real app, use a proper translation service
    if (locale === 'sl' && title.includes('Workshop')) {
      title = title.replace('Workshop', 'Delavnica');
    } else if (locale === 'sl' && title.includes('Lecture')) {
      title = title.replace('Lecture', 'Predavanje');
    } else if (locale === 'sl' && title.includes('Community Event')) {
      title = title.replace('Community Event', 'Skupnostni dogodek');
    }
        
    // Format the event
    events.push({
      id: event.uid || `event-${events.length + 1}`,
      title: title,
      description: description,
      start: event.start,
      end: event.end || new Date(event.start.getTime() + 60 * 60 * 1000), // Default 1 hour
      location: event.location || 'Livada Biotope, Ljubljana',
      type: eventType,
      url: event.url || ''
    });
  }
} catch (error) {
  console.error('Error parsing calendar data:', error);
  // If parsing fails, use mock events
  events = mockEvents;
}
    
// If no events were parsed, use mock events
if (events.length === 0) {
  console.log('No events parsed from calendar. Using mock events.');
  events = mockEvents;
}
    
// Cache the events
cache.set(cacheKey, events);
    
// Return the processed events
return {
  statusCode: 200,
  headers,
  body: JSON.stringify(events)
};

} catch (error) {
  console.error('Serverless function error:', error);
      
  // Generate mock events as a fallback
  const locale = (event.queryStringParameters || {}).locale || 'en';
  const mockEvents = generateMockEvents(locale);
      
  return {
    statusCode: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(mockEvents)
  };
}

} catch (error) {
  console.error('Error in calendar function:', error);
      
  return {
    statusCode: 500,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ 
      error: 'Error fetching calendar data',
      message: error.message
    })
  };
}
